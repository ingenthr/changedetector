{"views":{"s3counts":{"map":"function s3counts(doc, meta) {\n\n    // Create Base64 Object\n    var Base64 = {\n        _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", encode: function (e) {\n            var t = \"\";\n            var n, r, i, s, o, u, a;\n            var f = 0;\n            e = Base64._utf8_encode(e);\n            while (f < e.length) {\n                n = e.charCodeAt(f++);\n                r = e.charCodeAt(f++);\n                i = e.charCodeAt(f++);\n                s = n >> 2;\n                o = (n & 3) << 4 | r >> 4;\n                u = (r & 15) << 2 | i >> 6;\n                a = i & 63;\n                if (isNaN(r)) {\n                    u = a = 64\n                } else if (isNaN(i)) {\n                    a = 64\n                }\n                t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)\n            }\n            return t\n        }, decode: function (e) {\n            var t = \"\";\n            var n, r, i;\n            var s, o, u, a;\n            var f = 0;\n            e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n            while (f < e.length) {\n                s = this._keyStr.indexOf(e.charAt(f++));\n                o = this._keyStr.indexOf(e.charAt(f++));\n                u = this._keyStr.indexOf(e.charAt(f++));\n                a = this._keyStr.indexOf(e.charAt(f++));\n                n = s << 2 | o >> 4;\n                r = (o & 15) << 4 | u >> 2;\n                i = (u & 3) << 6 | a;\n                t = t + String.fromCharCode(n);\n                if (u != 64) {\n                    t = t + String.fromCharCode(r)\n                }\n                if (a != 64) {\n                    t = t + String.fromCharCode(i)\n                }\n            }\n            t = Base64._utf8_decode(t);\n            return t\n        }, _utf8_encode: function (e) {\n            e = e.replace(/\\r\\n/g, \"\\n\");\n            var t = \"\";\n            for (var n = 0; n < e.length; n++) {\n                var r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r)\n                } else if (r > 127 && r < 2048) {\n                    t += String.fromCharCode(r >> 6 | 192);\n                    t += String.fromCharCode(r & 63 | 128)\n                } else {\n                    t += String.fromCharCode(r >> 12 | 224);\n                    t += String.fromCharCode(r >> 6 & 63 | 128);\n                    t += String.fromCharCode(r & 63 | 128)\n                }\n            }\n            return t\n        }, _utf8_decode: function (e) {\n            var t = \"\";\n            var n = 0;\n            var r = c1 = c2 = 0;\n            while (n < e.length) {\n                r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r);\n                    n++\n                } else if (r > 191 && r < 224) {\n                    c2 = e.charCodeAt(n + 1);\n                    t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n                    n += 2\n                } else {\n                    c2 = e.charCodeAt(n + 1);\n                    c3 = e.charCodeAt(n + 2);\n                    t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                    n += 3\n                }\n            }\n            return t\n        }\n    };\n\n\n    // logline parsing\n    // see http://regex101.com/r/cB1qM6/7\n    var s3re = /^(\\S+) (\\S+) \\[([\\w:\\/]+\\s[+\\-]\\d{4})\\] ([\\d.]+) (\\S+) (\\S+) (\\S+) (\\S+) \\\\?\"(.+?)\\\\?\" (\\d{3}) (\\S+) (\\S+) (\\S+) (\\d+) (\\S+) \\\\?\"(.+?)\\\\?\" \\\\?\"(.+?)\\\\?\" (\\S+)/;\n    /**\n     * per the docs: http://docs.aws.amazon.com/AmazonS3/latest/dev/LogFormat.html\n     * 1: bucket owner\n     * 2: bucket name\n     * 3: time\n     * 4: remote IP\n     * 5: requester\n     * 6: request ID\n     * 7: Operation\n     * 8: Key, a.k.a. the item\n     * 9: request-URI\n     * 10: HTTP status\n     * 11: Error code\n     * 12: Bytes sent\n     * 13: Object size\n     * 14: total time\n     * 15: turnaround time\n     * 16: Referrer\n     * 17: User-Agent\n     * 18: Version ID\n     *\n     */\n\n    var logdatetimere = /(\\d{2})\\/(\\S+)\\/(\\d{4}):(\\d{2}):(\\d{2}):(\\d{2})\\s[+\\-](\\d{4})/;\n\n    function clDateToArray(datetime) {\n        dtokens = logdatetimere.exec(datetime);\n\n        if (dtokens) {\n            var day = parseInt(dtokens[1]);\n            var year = parseInt(dtokens[3]);\n            var month = 0;\n\n            switch (dtokens[2]) {\n                case \"Jan\":\n                    month = 1;\n                    break;\n                case \"Feb\":\n                    month = 2;\n                    break;\n                case \"Mar\":\n                    month = 3;\n                    break;\n                case \"Apr\":\n                    month = 4;\n                    break;\n                case \"May\":\n                    month = 5;\n                    break;\n                case \"Jun\":\n                    month = 6;\n                    break;\n                case \"Jul\":\n                    month = 7;\n                    break;\n                case \"Aug\":\n                    month = 8;\n                    break;\n                case \"Sep\":\n                    month = 9;\n                    break;\n                case \"Oct\":\n                    month = 10;\n                    break;\n                case \"Nov\":\n                    month = 11;\n                    break;\n                case \"Dec\":\n                    month = 12;\n                    break;\n            }\n\n            var hour = parseInt(dtokens[4]);\n            var minute = parseInt(dtokens[5]);\n            var second = parseInt(dtokens[6]);\n        }\n\n        return [year, month, day, hour, minute, second];\n    }\n\n    if (meta.type == \"base64\") {\n        var cmp = function (ref, val) {\n            for (var i = 0, l = ref.length; i < l; ++i) {\n                if (ref[i] != val[i]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        var database = [\n            {type: \"image/png\", magic: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]},\n            {type: \"image/jpeg\", magic: [0xff, 0xd8]},\n            {type: \"image/gif\", magic: [0x47, 0x49, 0x46, 0x38, 0x37, 0x61]},\n            {type: \"image/gif\", magic: [0x47, 0x49, 0x46, 0x38, 0x39, 0x61]},\n        ];\n        //var logline = btoa(decodeBase64(doc));\n        var loglines = Base64.decode(doc);\n        lines = loglines.split(/\\r\\n|\\r|\\n/g);\n        // var header = binary.slice(0, 8);\n        //for (var i = 0, l = database.length; i < l; ++i) {\n        //  if (cmp(database[i].magic, header)) {\n        //    emit(meta.id, database[i].type);\n        //    return;\n        //  }\n        //}\n        //emit(meta.id, \"application/octect-stream\");\n\n        for (var i = 0; i < lines.length; i++) {\n\n            var tokens = s3re.exec(lines[i]);\n            if (tokens) {\n\n                var datetime_arr;\n                var bytes_sent = parseInt(tokens[12]) || 0;\n                try {\n                    datetime_arr = clDateToArray(tokens[3]);\n                } catch (e) {\n                    log(\"Could not convert common log date to array: \" + tokens[3]);\n                    return;\n                }\n                var item_as_arr = [tokens[8]];\n\n                if (item_as_arr[0] && datetime_arr) {\n                    var aggrkey = item_as_arr.concat(datetime_arr);\n                    switch (tokens[10]) {\n                        case \"403\": /* permission denied */\n                            return;\n                            break;\n                        case \"304\": /* not modified */\n                            return;\n                            break;\n                        case \"200\":\n                            emit(aggrkey, bytes_sent);\n                            break;\n                        case \"206\":\n                            emit(aggrkey, bytes_sent);\n                            break;\n                        default:\n                        //emit(\"Xception-httpcode\", [tokens[10], lines[i]]); //for debugging\n                    }\n                } else {\n                    //emit(\"Xception-dateparse\", [tokens[3], lines[i]]); //for debugging\n                }\n\n\n            } else {\n\n                if (lines[i] == \"\") {\n                    return;\n                }\n\n\n                //emit(\"Xception-regexmatch\", lines[i]); //for debugging\n            }\n\n        }\n    }\n}","reduce":"_sum"},"uagent_bykey":{"map":"function uagent_bykey(doc, meta) {\n\n    // Create Base64 Object\n    var Base64 = {\n        _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", encode: function (e) {\n            var t = \"\";\n            var n, r, i, s, o, u, a;\n            var f = 0;\n            e = Base64._utf8_encode(e);\n            while (f < e.length) {\n                n = e.charCodeAt(f++);\n                r = e.charCodeAt(f++);\n                i = e.charCodeAt(f++);\n                s = n >> 2;\n                o = (n & 3) << 4 | r >> 4;\n                u = (r & 15) << 2 | i >> 6;\n                a = i & 63;\n                if (isNaN(r)) {\n                    u = a = 64\n                } else if (isNaN(i)) {\n                    a = 64\n                }\n                t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)\n            }\n            return t\n        }, decode: function (e) {\n            var t = \"\";\n            var n, r, i;\n            var s, o, u, a;\n            var f = 0;\n            e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n            while (f < e.length) {\n                s = this._keyStr.indexOf(e.charAt(f++));\n                o = this._keyStr.indexOf(e.charAt(f++));\n                u = this._keyStr.indexOf(e.charAt(f++));\n                a = this._keyStr.indexOf(e.charAt(f++));\n                n = s << 2 | o >> 4;\n                r = (o & 15) << 4 | u >> 2;\n                i = (u & 3) << 6 | a;\n                t = t + String.fromCharCode(n);\n                if (u != 64) {\n                    t = t + String.fromCharCode(r)\n                }\n                if (a != 64) {\n                    t = t + String.fromCharCode(i)\n                }\n            }\n            t = Base64._utf8_decode(t);\n            return t\n        }, _utf8_encode: function (e) {\n            e = e.replace(/\\r\\n/g, \"\\n\");\n            var t = \"\";\n            for (var n = 0; n < e.length; n++) {\n                var r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r)\n                } else if (r > 127 && r < 2048) {\n                    t += String.fromCharCode(r >> 6 | 192);\n                    t += String.fromCharCode(r & 63 | 128)\n                } else {\n                    t += String.fromCharCode(r >> 12 | 224);\n                    t += String.fromCharCode(r >> 6 & 63 | 128);\n                    t += String.fromCharCode(r & 63 | 128)\n                }\n            }\n            return t\n        }, _utf8_decode: function (e) {\n            var t = \"\";\n            var n = 0;\n            var r = c1 = c2 = 0;\n            while (n < e.length) {\n                r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r);\n                    n++\n                } else if (r > 191 && r < 224) {\n                    c2 = e.charCodeAt(n + 1);\n                    t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n                    n += 2\n                } else {\n                    c2 = e.charCodeAt(n + 1);\n                    c3 = e.charCodeAt(n + 2);\n                    t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                    n += 3\n                }\n            }\n            return t\n        }\n    }\n\n    // logline parsing\n    // See more at http://regex101.com/r/cB1qM6/7\n    var s3re = /^(\\S+) (\\S+) \\[([\\w:\\/]+\\s[+\\-]\\d{4})\\] ([\\d.]+) (\\S+) (\\S+) (\\S+) (\\S+) \\\\?\"(.+?)\\\\?\" (\\d{3}) (\\S+) (\\S+) (\\S+) (\\d+) (\\S+) \\\\?\"(.+?)\\\\?\" \\\\?\"(.+?)\\\\?\" (\\S+)/\n    /**\n     * per the docs: http://docs.aws.amazon.com/AmazonS3/latest/dev/LogFormat.html\n     * 1: bucket owner\n     * 2: bucket name\n     * 3: time\n     * 4: remote IP\n     * 5: requester\n     * 6: request ID\n     * 7: Operation\n     * 8: Key, a.k.a. the item\n     * 9: request-URI\n     * 10: HTTP status\n     * 11: Error code\n     * 12: Bytes sent\n     * 13: Object size\n     * 14: total time\n     * 15: turnaround time\n     * 16: Referrer\n     * 17: User-Agent\n     * 18: Version ID\n     *\n     */\n\n    if (meta.type == \"base64\") {\n        var cmp = function (ref, val) {\n            for (var i = 0, l = ref.length; i < l; ++i) {\n                if (ref[i] != val[i]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        var database = [\n            {type: \"image/png\", magic: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]},\n            {type: \"image/jpeg\", magic: [0xff, 0xd8]},\n            {type: \"image/gif\", magic: [0x47, 0x49, 0x46, 0x38, 0x37, 0x61]},\n            {type: \"image/gif\", magic: [0x47, 0x49, 0x46, 0x38, 0x39, 0x61]},\n        ]\n\n\n        var loglines = Base64.decode(doc);\n        lines = loglines.split(/\\r\\n|\\r|\\n/g);\n// var header = binary.slice(0, 8);\n//for (var i = 0, l = database.length; i < l; ++i) {\n//  if (cmp(database[i].magic, header)) {\n//    emit(meta.id, database[i].type);\n//    return;\n//  }\n        //}\n        //emit(meta.id, \"application/octect-stream\");\n\n        //emit(meta.id, lines.length);\n        //emit(meta.id + \"log\", loglines);\n        //emit(meta.id + \"lines\", lines);\n\n        //var myArray = logEntryPattern.exec(lines[0]);\n\n        //emit(null,\"ipAddy: \", myArray.length);\n        // http://regex101.com/r/cB1qM6/3\n\n        for (var i = 0; i < lines.length; i++) {\n            var tokens = s3re.exec(lines[i]);\n            if (tokens) {\n\n                switch (tokens[10]) {\n                    case \"403\": /* permission denied */\n                        return;\n                        break;\n                    case \"304\": /* not modified */\n                        return;\n                        break;\n                    default:\n                        break;\n                    //emit(\"Xception-httpcode\", [tokens[10], lines[i]]);\n                }\n\n                emit([tokens[8], tokens[17]]);  //TODO: logical grouping\n\n            } else {\n                if (lines[i] == \"\") {\n                    return;\n                }\n                //emit(\"Xception-regexmatch\", lines[i]);  // not needed here\n            }\n\n        }\n    }\n}","reduce":"_count"},"httpopcounts":{"map":"function s3counts(doc, meta) {\n\n    // Create Base64 Object\n    var Base64 = {\n        _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", encode: function (e) {\n            var t = \"\";\n            var n, r, i, s, o, u, a;\n            var f = 0;\n            e = Base64._utf8_encode(e);\n            while (f < e.length) {\n                n = e.charCodeAt(f++);\n                r = e.charCodeAt(f++);\n                i = e.charCodeAt(f++);\n                s = n >> 2;\n                o = (n & 3) << 4 | r >> 4;\n                u = (r & 15) << 2 | i >> 6;\n                a = i & 63;\n                if (isNaN(r)) {\n                    u = a = 64\n                } else if (isNaN(i)) {\n                    a = 64\n                }\n                t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)\n            }\n            return t\n        }, decode: function (e) {\n            var t = \"\";\n            var n, r, i;\n            var s, o, u, a;\n            var f = 0;\n            e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n            while (f < e.length) {\n                s = this._keyStr.indexOf(e.charAt(f++));\n                o = this._keyStr.indexOf(e.charAt(f++));\n                u = this._keyStr.indexOf(e.charAt(f++));\n                a = this._keyStr.indexOf(e.charAt(f++));\n                n = s << 2 | o >> 4;\n                r = (o & 15) << 4 | u >> 2;\n                i = (u & 3) << 6 | a;\n                t = t + String.fromCharCode(n);\n                if (u != 64) {\n                    t = t + String.fromCharCode(r)\n                }\n                if (a != 64) {\n                    t = t + String.fromCharCode(i)\n                }\n            }\n            t = Base64._utf8_decode(t);\n            return t\n        }, _utf8_encode: function (e) {\n            e = e.replace(/\\r\\n/g, \"\\n\");\n            var t = \"\";\n            for (var n = 0; n < e.length; n++) {\n                var r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r)\n                } else if (r > 127 && r < 2048) {\n                    t += String.fromCharCode(r >> 6 | 192);\n                    t += String.fromCharCode(r & 63 | 128)\n                } else {\n                    t += String.fromCharCode(r >> 12 | 224);\n                    t += String.fromCharCode(r >> 6 & 63 | 128);\n                    t += String.fromCharCode(r & 63 | 128)\n                }\n            }\n            return t\n        }, _utf8_decode: function (e) {\n            var t = \"\";\n            var n = 0;\n            var r = c1 = c2 = 0;\n            while (n < e.length) {\n                r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r);\n                    n++\n                } else if (r > 191 && r < 224) {\n                    c2 = e.charCodeAt(n + 1);\n                    t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n                    n += 2\n                } else {\n                    c2 = e.charCodeAt(n + 1);\n                    c3 = e.charCodeAt(n + 2);\n                    t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                    n += 3\n                }\n            }\n            return t\n        }\n    };\n\n\n    // logline parsing\n    // see http://regex101.com/r/cB1qM6/7\n    var s3re = /^(\\S+) (\\S+) \\[([\\w:\\/]+\\s[+\\-]\\d{4})\\] ([\\d.]+) (\\S+) (\\S+) (\\S+) (\\S+) \\\\?\"(.+?)\\\\?\" (\\d{3}) (\\S+) (\\S+) (\\S+) (\\d+) (\\S+) \\\\?\"(.+?)\\\\?\" \\\\?\"(.+?)\\\\?\" (\\S+)/;\n    /**\n     * per the docs: http://docs.aws.amazon.com/AmazonS3/latest/dev/LogFormat.html\n     * 1: bucket owner\n     * 2: bucket name\n     * 3: time\n     * 4: remote IP\n     * 5: requester\n     * 6: request ID\n     * 7: Operation\n     * 8: Key, a.k.a. the item\n     * 9: request-URI\n     * 10: HTTP status\n     * 11: Error code\n     * 12: Bytes sent\n     * 13: Object size\n     * 14: total time\n     * 15: turnaround time\n     * 16: Referrer\n     * 17: User-Agent\n     * 18: Version ID\n     *\n     */\n\n    var logdatetimere = /(\\d{2})\\/(\\S+)\\/(\\d{4}):(\\d{2}):(\\d{2}):(\\d{2})\\s[+\\-](\\d{4})/;\n\n    function clDateToArray(datetime) {\n        dtokens = logdatetimere.exec(datetime);\n\n        if (dtokens) {\n            var day = parseInt(dtokens[1]);\n            var year = parseInt(dtokens[3]);\n            var month = 0;\n\n            switch (dtokens[2]) {\n                case \"Jan\":\n                    month = 1;\n                    break;\n                case \"Feb\":\n                    month = 2;\n                    break;\n                case \"Mar\":\n                    month = 3;\n                    break;\n                case \"Apr\":\n                    month = 4;\n                    break;\n                case \"May\":\n                    month = 5;\n                    break;\n                case \"Jun\":\n                    month = 6;\n                    break;\n                case \"Jul\":\n                    month = 7;\n                    break;\n                case \"Aug\":\n                    month = 8;\n                    break;\n                case \"Sep\":\n                    month = 9;\n                    break;\n                case \"Oct\":\n                    month = 10;\n                    break;\n                case \"Nov\":\n                    month = 11;\n                    break;\n                case \"Dec\":\n                    month = 12;\n                    break;\n            }\n\n            var hour = parseInt(dtokens[4]);\n            var minute = parseInt(dtokens[5]);\n            var second = parseInt(dtokens[6]);\n        }\n\n        return [year, month, day, hour, minute, second];\n    }\n\n    if (meta.type == \"base64\") {\n        var cmp = function (ref, val) {\n            for (var i = 0, l = ref.length; i < l; ++i) {\n                if (ref[i] != val[i]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        var database = [\n            {type: \"image/png\", magic: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]},\n            {type: \"image/jpeg\", magic: [0xff, 0xd8]},\n            {type: \"image/gif\", magic: [0x47, 0x49, 0x46, 0x38, 0x37, 0x61]},\n            {type: \"image/gif\", magic: [0x47, 0x49, 0x46, 0x38, 0x39, 0x61]},\n        ];\n        //var logline = btoa(decodeBase64(doc));\n        var loglines = Base64.decode(doc);\n        lines = loglines.split(/\\r\\n|\\r|\\n/g);\n        // var header = binary.slice(0, 8);\n        //for (var i = 0, l = database.length; i < l; ++i) {\n        //  if (cmp(database[i].magic, header)) {\n        //    emit(meta.id, database[i].type);\n        //    return;\n        //  }\n        //}\n        //emit(meta.id, \"application/octect-stream\");\n\n        for (var i = 0; i < lines.length; i++) {\n\n            var tokens = s3re.exec(lines[i]);\n            if (tokens) {\n\n                var datetime_arr;\n                var bytes_sent = parseInt(tokens[12]) || 0;\n                try {\n                    datetime_arr = clDateToArray(tokens[3]);\n                } catch (e) {\n                    log(\"Could not convert common log date to array: \" + tokens[3]);\n                    return;\n                }\n                var item_as_arr = [tokens[8]];\n\n                if (item_as_arr[0] && datetime_arr) {\n                    var aggropkey = item_as_arr.concat(parseInt(tokens[10])).concat(datetime_arr);\n                    emit(aggropkey, 1);\n                    //switch (tokens[10]) {\n                    //    case \"403\": /* permission denied */\n                    //        return;\n                    //        break;\n                    //    case \"304\": /* not modified */\n                    //        return;\n                    //        break;\n                    //    case \"200\":\n                    //        emit(aggrkey, bytes_sent);\n                    //        break;\n                    //    case \"206\":\n                    //        emit(aggrkey, bytes_sent);\n                    //        break;\n                    //    default:\n                    //    //emit(\"Xception-httpcode\", [tokens[10], lines[i]]); //for debugging\n                    //}\n                } else {\n                    //emit(\"Xception-dateparse\", [tokens[3], lines[i]]); //for debugging\n                }\n\n            } else {\n\n                if (lines[i] == \"\") {\n                    return;\n                }\n\n\n                //emit(\"Xception-regexmatch\", lines[i]); //for debugging\n            }\n\n        }\n    }\n}","reduce":"_sum"}}}